<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__brushless_eirbot_8hpp_source" xml:lang="fr">
<title>BrushlessEirbot.hpp</title>
<indexterm><primary>lib/BrushlessEirbot/BrushlessEirbot.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__brushless_eirbot_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;brushless_hpp</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;brushless_hpp</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00003"/>00003 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;mbed.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;tim.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;PIController.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;PIDController.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00009"/>00009 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00010"/>00010 <emphasis role="preprocessor">#define&#32;MAX_SPEED&#32;&#32;&#32;20000</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00011"/>00011 <emphasis role="preprocessor">#define&#32;MIN_SPEED&#32;&#32;&#32;(-20000)</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00012"/>00012 <emphasis role="preprocessor">#define&#32;DC_MIN&#32;(-90)</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00013"/>00013 <emphasis role="preprocessor">#define&#32;DC_MAX&#32;90</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00014"/>00014 <emphasis role="preprocessor">#define&#32;tickPerRevolution&#32;(14*48)</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00015"/>00015 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00016"/>00016 <emphasis role="keyword">enum</emphasis>&#32;rotationSens_t&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;clockwise,&#32;antiClockwise
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00018"/>00018 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00019"/>00019 <emphasis role="keyword">enum</emphasis>&#32;state&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;activated,&#32;desactivated,&#32;emergency
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00021"/>00021 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00022"/>00022 <emphasis role="keyword">enum</emphasis>&#32;position&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;Left,&#32;Right
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00024"/>00024 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00025"/>00025 <emphasis role="keyword">enum</emphasis>&#32;unitVelocity&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;rad_s,&#32;tick_s,&#32;mm_s
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00027"/>00027 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00028"/>00028 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00029"/><link linkend="_structhall__t">00029</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h2;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;h123;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;prev_h123;&#32;&#32;&#32;&#32;<emphasis role="comment">//to&#32;determine&#32;sense&#32;of&#32;rotation</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00035"/>00035 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;int32_t&#32;ticks;&#32;&#32;&#32;&#32;<emphasis role="comment">//to&#32;calculate&#32;ticks</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00037"/>00037 }&#32;<link linkend="_structhall__t">hall_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00038"/>00038 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00039"/><link linkend="_struct_p_w_m__t">00039</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;cH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;cL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;rotationSens_t&#32;sens;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00047"/>00047 }&#32;<link linkend="_struct_p_w_m__t">PWM_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00048"/>00048 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00049"/><link linkend="_structdata_speed__t">00049</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;int32_t&#32;speed_ref;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;int32_t&#32;speed;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00052"/>00052 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;int32_t&#32;error;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;int32_t&#32;prev_error;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00055"/>00055 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;int32_t&#32;cmd;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;int32_t&#32;prev_cmd;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;int32_t&#32;cmdsat;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;int32_t&#32;prev_cmdsat;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00060"/>00060 }&#32;<link linkend="_structdata_speed__t">dataSpeed_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00061"/>00061 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00062"/>00062 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00063"/><link linkend="_class_brushless_eirbot">00063</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_brushless_eirbot">BrushlessEirbot</link>&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00064"/>00064 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">BrushlessEirbot</link>(position&#32;position_motor,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wheelDiameterMm);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00076"/>00076 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">BrushlessEirbot</link>(BufferedSerial&#32;*pc,&#32;position&#32;position_motor,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wheelDiameterMm);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00084"/>00084 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">~BrushlessEirbot</link>();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00086"/>00086 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_brushless_eirbot_1a5241f404cf29badcb111e9f7fb0af3a8">setPI</link>(<emphasis role="keywordtype">double</emphasis>&#32;Kp,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wi,&#32;std::chrono::microseconds&#32;TeUsController&#32;=&#32;10ms);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00094"/>00094 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_brushless_eirbot_1ae1c2c242b70dfe7f1e63d5b714c3ea53">setPID</link>(<emphasis role="keywordtype">double</emphasis>&#32;Kp,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wi,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wb,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wh,&#32;std::chrono::microseconds&#32;TeUsController&#32;=&#32;10ms);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00104"/>00104 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_brushless_eirbot_1a6448f3e20f871690231f6da3a547169e">setVelocity</link>(unitVelocity&#32;unit,&#32;<emphasis role="keywordtype">double</emphasis>&#32;consigne);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00111"/>00111 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_brushless_eirbot_1a5ea31800aa8df165909d665fe6f4ab6b">setController</link>(state&#32;stateController);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00117"/>00117 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00118"/>00118 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_brushless_eirbot_1aeb947ad1aa4fbab728f26b75b1c93525">getVelocity</link>(unitVelocity&#32;unit)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00126"/>00126 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_brushless_eirbot_1a00aedfaadc9b911caf28ac2b3bff64d2">displayPinOut</link>();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00132"/>00132 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00133"/>00133 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;state&#32;_stateController;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;Timer&#32;_timerVelocity;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;position&#32;_positionMotor;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_wheelDiameterMm;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00138"/>00138 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;BufferedSerial&#32;*_serial{0};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_debug{<emphasis role="keyword">false</emphasis>};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00141"/>00141 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<link linkend="_structhall__t">hall_t</link>&#32;hall{0};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<link linkend="_struct_p_w_m__t">PWM_t</link>&#32;PWM{0};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<link linkend="_structdata_speed__t">dataSpeed_t</link>&#32;data{0};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00145"/>00145 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00146"/>00146 <emphasis role="comment">//&#32;Méthodes&#32;primitives</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00152"/>00152 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;decodeHall();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00153"/>00153 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateOutput();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00158"/>00158 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00159"/>00159 <emphasis role="comment">//&#32;Méthodes&#32;d&apos;asservissements</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00164"/>00164 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setDutyCycle();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00165"/>00165 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;int16_t&#32;calculateSpeed();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00172"/>00172 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00173"/>00173 <emphasis role="comment">//&#32;Pins&#32;et&#32;instances</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_AH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_AL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_BH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_BL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_CH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_CL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;PinName&#32;_pinHall_1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;PinName&#32;_pinHall_2;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;PinName&#32;_pinHall_3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;PinName&#32;_pinCurrent_A;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;PinName&#32;_pinCurrent_B;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;PinName&#32;_pinCurrent_C;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00186"/>00186 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_2;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00190"/>00190 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;hallInterrupt();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00192"/>00192 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_A;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_B;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_C;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00196"/>00196 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<link linkend="_class_p_i_controller">PIController</link>&#32;*controllerPI{};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<link linkend="_class_p_i_d_controller">PIDController</link>&#32;*controllerPID{};
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00199"/>00199 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00201"/>00201 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Période&#32;d&apos;échantillonnage&#32;pour&#32;les&#32;tickers.</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00202"/>00202 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;TeUs_asserv&#32;:&#32;période&#32;en&#32;µs&#32;pour&#32;la&#32;fonction&#32;updateController()&#32;qui&#32;actualise&#32;la&#32;commande&#32;via&#32;le&#32;PID</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00203"/>00203 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;TeUs_hall_secure&#32;:&#32;période&#32;en&#32;µs&#32;pour&#32;la&#32;lecture&#32;des&#32;Hall&#32;sensors,&#32;comme&#32;dans&#32;le&#32;cas&#32;où&#32;le&#32;moteur&#32;est&#32;très&#32;rapide,</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00204"/>00204 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;il&#32;se&#32;peut&#32;qu&apos;une&#32;interruption&#32;soit&#32;manquée,&#32;dans&#32;ce&#32;cas&#32;il&#32;y&#32;a&#32;un&#32;risque&#32;majeur&#32;de&#32;court-circuit&#32;sur&#32;le&#32;moteur&#32;/!\</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00205"/>00205 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Pour&#32;éviter&#32;cela&#32;nous&#32;allons&#32;mettre&#32;en&#32;place&#32;un&#32;processus&#32;périodique&#32;qui&#32;va&#32;regarder&#32;assez&#32;régulièrement&#32;l&apos;état&#32;des&#32;Hall&#32;sensors</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00206"/>00206 <emphasis role="comment">&lt;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;std::chrono::microseconds&#32;TeUsController&#32;=&#32;10ms;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::chrono::microseconds&#32;TeUsHallSecure&#32;=&#32;100us;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;Ticker&#32;_tickerController;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;Ticker&#32;_tickerHallSecure;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;Ticker&#32;_hallSecure;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00212"/>00212 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_routineController();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00217"/>00217 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_routineHallSecure();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00222"/>00222 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00223"/>00223 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00224"/>00224 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00225"/>00225 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
