<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__brushless_eirbot_8hpp_source" xml:lang="fr">
<title>BrushlessEirbot.hpp</title>
<indexterm><primary>lib/BrushlessEirbot/BrushlessEirbot.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__brushless_eirbot_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;brushless_hpp</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;brushless_hpp</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00003"/>00003 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;mbed.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;tim.h&quot;</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00006"/>00006 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00007"/>00007 <emphasis role="preprocessor">#define&#32;P&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//p&#32;number&#32;of&#32;poles&#32;pairs</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00008"/>00008 <emphasis role="preprocessor">#define&#32;FREQ_TIM7&#32;&#32;&#32;10000</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00009"/>00009 <emphasis role="preprocessor">#define&#32;MAX_SPEED&#32;&#32;&#32;20000</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00010"/>00010 <emphasis role="preprocessor">#define&#32;MIN_SPEED&#32;&#32;&#32;(-20000)</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00011"/>00011 <emphasis role="preprocessor">#define&#32;DC_MIN&#32;-90</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00012"/>00012 <emphasis role="preprocessor">#define&#32;DC_MAX&#32;90</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00013"/>00013 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00014"/>00014 <emphasis role="keyword">enum</emphasis>&#32;rotationSens_t&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;clockwise,&#32;antiClockwise
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00016"/>00016 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00017"/>00017 <emphasis role="keyword">enum</emphasis>&#32;state&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;enable,&#32;busy
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00019"/>00019 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00020"/>00020 <emphasis role="keyword">enum</emphasis>&#32;position&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;Left,&#32;Right
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00022"/>00022 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00023"/>00023 <emphasis role="keyword">enum</emphasis>&#32;unitVelocity&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;rad_s,&#32;tick_s,&#32;mm_s
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00025"/>00025 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00026"/>00026 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00027"/><link linkend="_structhall__t">00027</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h2;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;h3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;h123;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;prev_h123;&#32;&#32;&#32;&#32;<emphasis role="comment">//to&#32;determine&#32;sense&#32;of&#32;rotation</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00033"/>00033 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;int16_t&#32;tickS;&#32;&#32;&#32;&#32;<emphasis role="comment">//to&#32;calculate&#32;speed</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;int32_t&#32;tickP;&#32;&#32;&#32;&#32;<emphasis role="comment">//tocallback(this,&#32;&amp;BrushlessEirbot::hallInterrupt)&#32;calculate&#32;position</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00036"/>00036 }<link linkend="_structhall__t">hall_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00037"/>00037 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00038"/><link linkend="_struct_p_w_m__t">00038</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Channels&#32;enable&#32;bits</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;cH;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;cL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;rotationSens_t&#32;sens;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00047"/>00047 }<link linkend="_struct_p_w_m__t">PWM_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00048"/>00048 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00049"/><link linkend="_structdata_speed__t">00049</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;int32_t&#32;speed_ref;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;int32_t&#32;speed;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00052"/>00052 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;int32_t&#32;error;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;int32_t&#32;prev_error;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00055"/>00055 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;int32_t&#32;cmd;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;int32_t&#32;prev_cmd;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;int32_t&#32;cmdsat;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;int32_t&#32;prev_cmdsat;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00060"/>00060 }<link linkend="_structdata_speed__t">dataSpeed_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00061"/>00061 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00062"/><link linkend="_struct_p_i_d__t">00062</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Kp;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;w_i;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Te;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Integration&#32;coefficient&#32;:&#32;PI(z)&#32;=&#32;setSpeed_ref(z)/error(z)&#32;=&#32;Kp*(a0-a1*z^{-1})/(1-z^{-1})</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;a0;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;a1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00069"/>00069 }<link linkend="_struct_p_i_d__t">PID_t</link>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00070"/>00070 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00071"/>00071 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00072"/><link linkend="_class_brushless_eirbot">00072</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_brushless_eirbot">BrushlessEirbot</link>&#32;{
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00073"/>00073 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">BrushlessEirbot</link>(position&#32;position_motor,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wheelDiameterMm);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">BrushlessEirbot</link>(BufferedSerial*&#32;pc,&#32;position&#32;position_motor,&#32;<emphasis role="keywordtype">double</emphasis>&#32;wheelDiameterMm);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setVelocity(unitVelocity&#32;unit,&#32;<emphasis role="keywordtype">double</emphasis>&#32;consigne);
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;getVelocity(unitVelocity&#32;unit)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;displayPinOut();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<link linkend="_class_brushless_eirbot">~BrushlessEirbot</link>();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00096"/>00096 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;state&#32;_stateController;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;Timer&#32;_timerVelocity;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;position&#32;_positionMotor;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00100"/>00100 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;BufferedSerial*&#32;_serial;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00102"/>00102 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setDutyCycle();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;decodeHall();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateOutput();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;int16_t&#32;calculateSpeed();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeCommand();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00108"/>00108 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<link linkend="_structhall__t">hall_t</link>&#32;hall;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<link linkend="_struct_p_w_m__t">PWM_t</link>&#32;PWM;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<link linkend="_structdata_speed__t">dataSpeed_t</link>&#32;data;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00112"/>00112 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00114"/>00114 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;Pins&#32;et&#32;instances</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00115"/>00115 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_AH;&#32;PinName&#32;_pinPWM_AL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_BH;&#32;PinName&#32;_pinPWM_BL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;PinName&#32;_pinPWM_CH;&#32;PinName&#32;_pinPWM_CL;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;PinName&#32;_pinHall_1;&#32;PinName&#32;_pinHall_2;&#32;PinName&#32;_pinHall_3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;PinName&#32;_pinCurrent_A;&#32;PinName&#32;_pinCurrent_B;&#32;PinName&#32;_pinCurrent_C;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00121"/>00121 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_1;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_2;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;InterruptIn&#32;*HALL_3;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;hallInterrupt();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00126"/>00126 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_A;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_B;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;AnalogIn&#32;*Current_C;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00130"/>00130 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00132"/>00132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Période&#32;d&apos;échantillonnage&#32;pour&#32;les&#32;tickers.</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00133"/>00133 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;TeUs_asserv&#32;:&#32;période&#32;en&#32;µs&#32;pour&#32;la&#32;fonction&#32;updateController()&#32;qui&#32;actualise&#32;la&#32;commande&#32;via&#32;le&#32;PID</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00134"/>00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;TeUs_hall_secure&#32;:&#32;période&#32;en&#32;µs&#32;pour&#32;la&#32;lecture&#32;des&#32;Hall&#32;sensors,&#32;comme&#32;dans&#32;le&#32;cas&#32;où&#32;le&#32;moteur&#32;est&#32;très&#32;rapide,</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00135"/>00135 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;il&#32;se&#32;peut&#32;qu&apos;une&#32;interruption&#32;soit&#32;manquée,&#32;dans&#32;ce&#32;cas&#32;il&#32;y&#32;a&#32;un&#32;risque&#32;majeur&#32;de&#32;court-circuit&#32;sur&#32;le&#32;moteur&#32;/!\</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00136"/>00136 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Pour&#32;éviter&#32;cela&#32;nous&#32;allons&#32;mettre&#32;en&#32;place&#32;un&#32;processus&#32;périodique&#32;qui&#32;va&#32;regarder&#32;assez&#32;régulièrement&#32;l&apos;état&#32;des&#32;Hall&#32;sensors</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00137"/>00137 <emphasis role="comment">&lt;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::chrono::microseconds&#32;TeUsController&#32;=&#32;10ms;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::chrono::microseconds&#32;TeUsHallSecure&#32;=&#32;100us;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_routineController();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_routineHallSecure();
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;Ticker&#32;_tickerController;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;Ticker&#32;_tickerHallSecure;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;Ticker&#32;_hallSecure;
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00145"/>00145 };
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00146"/>00146 
<anchor xml:id="__brushless_eirbot_8hpp_source_1l00147"/>00147 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
