<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__serial_plot_8cpp_source" xml:lang="fr">
<title>SerialPlot.cpp</title>
<indexterm><primary>lib/SerialPlot/SerialPlot.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__serial_plot_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;SerialPlot.hpp&quot;</emphasis>
<anchor xml:id="__serial_plot_8cpp_source_1l00002"/>00002 
<anchor xml:id="__serial_plot_8cpp_source_1l00003"/>00003 SerialPlot::SerialPlot(BufferedSerial&#32;*pc,&#32;uint8_t&#32;number_variables,&#32;std::chrono::microseconds&#32;time_sample)&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00004"/>00004 &#32;&#32;&#32;&#32;_pc&#32;=&#32;pc;
<anchor xml:id="__serial_plot_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;_number_variables&#32;=&#32;number_variables;
<anchor xml:id="__serial_plot_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;_timeSample&#32;=&#32;time_sample;
<anchor xml:id="__serial_plot_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i=0&#32;;&#32;i&lt;20&#32;;&#32;i++)&#32;{&#32;buffer[i]&#32;=&#32;0;&#32;}
<anchor xml:id="__serial_plot_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="__serial_plot_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i=0&#32;;&#32;i&lt;number_variables-1&#32;;&#32;i++){
<anchor xml:id="__serial_plot_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.append(<emphasis role="stringliteral">&quot;%f,&quot;</emphasis>);
<anchor xml:id="__serial_plot_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;}
<anchor xml:id="__serial_plot_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;s.append(<emphasis role="stringliteral">&quot;%f\n&quot;</emphasis>);
<anchor xml:id="__serial_plot_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;_format&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[s.length()];
<anchor xml:id="__serial_plot_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;_format&#32;=&#32;s.c_str();
<anchor xml:id="__serial_plot_8cpp_source_1l00015"/>00015 
<anchor xml:id="__serial_plot_8cpp_source_1l00016"/>00016 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::string&#32;s&#32;=&#32;&quot;Constructeur\n&quot;;</emphasis>
<anchor xml:id="__serial_plot_8cpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;&#32;&#32;&#32;_pc-&gt;write(s.c_str(),&#32;s.length());</emphasis>
<anchor xml:id="__serial_plot_8cpp_source_1l00018"/>00018 }
<anchor xml:id="__serial_plot_8cpp_source_1l00019"/>00019 
<anchor xml:id="__serial_plot_8cpp_source_1l00020"/>00020 SerialPlot::~SerialPlot()&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;debug_ticker.detach();
<anchor xml:id="__serial_plot_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;debug_thread.terminate();
<anchor xml:id="__serial_plot_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_format;
<anchor xml:id="__serial_plot_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_variables;
<anchor xml:id="__serial_plot_8cpp_source_1l00025"/>00025 }
<anchor xml:id="__serial_plot_8cpp_source_1l00026"/>00026 
<anchor xml:id="__serial_plot_8cpp_source_1l00027"/>00027 <emphasis role="keywordtype">void</emphasis>&#32;SerialPlot::run()&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;debug_thread.start(callback(<emphasis role="keyword">this</emphasis>,&#32;&amp;SerialPlot::threadWorker));
<anchor xml:id="__serial_plot_8cpp_source_1l00029"/>00029 }
<anchor xml:id="__serial_plot_8cpp_source_1l00030"/>00030 
<anchor xml:id="__serial_plot_8cpp_source_1l00031"/>00031 <emphasis role="keywordtype">void</emphasis>&#32;SerialPlot::tickerWorker()&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0&#32;;&#32;i&lt;_number_variables&#32;;&#32;i++)&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprintf(buffer,&#32;_format,&#32;*_variables[i]);
<anchor xml:id="__serial_plot_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pc-&gt;write(buffer,&#32;<emphasis role="keyword">sizeof</emphasis>(buffer));
<anchor xml:id="__serial_plot_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;}
<anchor xml:id="__serial_plot_8cpp_source_1l00036"/>00036 }
<anchor xml:id="__serial_plot_8cpp_source_1l00037"/>00037 
<anchor xml:id="__serial_plot_8cpp_source_1l00038"/>00038 <emphasis role="keywordtype">void</emphasis>&#32;SerialPlot::threadWorker()&#32;{
<anchor xml:id="__serial_plot_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;debug_ticker.attach(callback(<emphasis role="keyword">this</emphasis>,&#32;&amp;SerialPlot::tickerWorker),&#32;_timeSample);
<anchor xml:id="__serial_plot_8cpp_source_1l00040"/>00040 
<anchor xml:id="__serial_plot_8cpp_source_1l00041"/>00041 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::string&#32;s&#32;=&#32;&quot;Ticker&#32;attach√©\n&quot;;</emphasis>
<anchor xml:id="__serial_plot_8cpp_source_1l00042"/>00042 <emphasis role="comment">//&#32;&#32;&#32;&#32;_pc-&gt;write(s.c_str(),&#32;s.length());</emphasis>
<anchor xml:id="__serial_plot_8cpp_source_1l00043"/>00043 }
</programlisting></section>
